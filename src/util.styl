// Archer:Util
// 
// @file    util.styl
// @author  firede(firede@firede.us)

@import 'config'
@import 'function'

/**
 * clearfix
 *
 * @see http://h5bp.com/q
 */
clearfix()
    &:after,
    &:before
        content: " "
        display: table
    &:after
        clear: both

/**
 * size settings
 */
size()
    if length(arguments) == 1
        width: arguments[0]
        height: arguments[0]
    else
        width: arguments[0]
        height: arguments[1]

/**
 * no bullets
 */
no-bullet()
    list-style-image: none
    list-style-type: none
    margin-right: 0

no-bullets()
    list-style: none
    li
        no-bullet()

/**
 * retina image
 */
retina-image(path, width = auto, height = auto, dppx = $retina_dppx)
    background-image: url(path)

    media_string = hidpi(dppx)

    @media media_string
        ext = extname(path)
        path = pathjoin(
            dirname(path),
            basename(path, ext) + $retina_suffix + ext
        )
        background-image: url(path)
        if width in (cover contain) and height == auto
            height = null
        background-size: width height

/**
 * hide text
 *
 * @see http://goo.gl/EglZN
 */
hide-text()
    color: transparent
    font: 0 / 0 a
    text-shadow: none

/**
 * ellipsis
 */
ellipsis()
    white-space: nowrap
    overflow: hidden
    text-overflow: ellipsis

/**
 * position shortcut
 */
_pos(type, args)
    pos_attrs = (left right top bottom)
    position: unquote(type)
    if args in pos_attrs
        // args like: left
        {args}: 0
    else if args[0] in pos_attrs and args[1] is a 'unit'
        // args like: left 10px
        {args[0]}: args[1] is a 'unit' ? args[1] : 0
    else
        // args like: top, right 20px
        for arg in args
            {arg[0]}: arg[1] is a 'unit' ? arg[1] : 0

fixed()
    _pos('fixed', arguments)

absolute()
    _pos('absolute', arguments)

relative()
    _pos('relative', arguments)

/**
 * arrow
 */
arrow(arrow_size, arrow_color, direction_pos, arrow_start_pos, arrow_start_offset = 0)
    opposite_direction_pos = opposite-position(direction_pos)
    position: relative if @position == null
    &:after
        position: absolute
        size: 0
        content: ' '
        pointer-events: none
        border: solid transparent
        border-width: (arrow_size / 2)
        border-{opposite_direction_pos}-color: arrow_color
        {opposite_direction_pos}: 100%
        if arrow_start_pos != center
            {arrow_start_pos}: arrow_start_offset
        else
            if direction_pos in (left right)
                top: 50%
                margin-top: -@border-width + arrow_start_offset
            if direction_pos in (top bottom)
                left: 50%
                margin-left: -@border-width + arrow_start_offset

